generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum CloudProvider {
  AWS
  AZURE
  GCP
}

enum RepositoryTemplate {
  // Application Repository Templates
  APP_PYTHON_FLASK
  APP_JAVA_SPRING
  APP_NODE_EXPRESS

  // Deployment Repository Templates
  DEPLOY_ARGOCD

  // Infrastructure Repository Templates
  INFRA_TERRAFORM
}

enum RepositoryType {
  APP
  DEPLOY
  INFRA
}

enum RepositoryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

model Project {
  id           Int             @id @default(autoincrement())
  number       Int             @default(9999)
  name         String          @unique
  readGroup    String
  writeGroup   String
  deployGroup  String
  clouds       CloudProvider[]
  repositories Repository[]

  @@map("project")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Repository {
  id              Int                  @id @default(autoincrement())
  projectId       Int
  project         Project              @relation(fields: [projectId], references: [id])
  name            String
  type            RepositoryType
  visibility      RepositoryVisibility
  template        RepositoryTemplate
  managementGroup String

  @@map("repository")
}
